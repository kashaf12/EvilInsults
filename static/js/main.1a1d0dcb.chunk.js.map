{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","color","setColor","useEffect","ind","Math","floor","random","insult","length","insultData","chroma","className","style","background","position","marginTop","class","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA6CeA,MAvCf,WAAgB,IAAD,EACUC,mBAAS,MADnB,mBACPC,EADO,KACDC,EADC,OAEYF,mBAAS,CAAC,UAAW,YAFjC,mBAEPG,EAFO,KAEAC,EAFA,KAUd,OAPAC,qBAAU,WACT,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,QAAU,EAClDC,EAAaF,EAAOJ,GAC1BJ,EAAQU,GACRR,EAAS,CAACS,IAAOJ,SAAUI,IAAOJ,aAChC,IAGF,sBACCK,UAAU,MACVC,MAAO,CACNC,WAAW,+BAAD,OAAiCb,EAAM,GAAvC,eAAgDA,EAAM,GAAtD,WAHZ,UAKC,oBAAIW,UAAU,cAAd,yBACA,qBACCC,MAAO,CACNE,SAAU,WACVC,UAAW,QAHb,SAKGjB,EAGD,qBAAKkB,MAAM,qBAAX,SACC,mBACCJ,MAAO,CACNK,SAAU,UAFZ,SAIEnB,MAPH,qBAAKkB,MAAM,eCjBDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCEdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,K","file":"static/js/main.1a1d0dcb.chunk.js","sourcesContent":["/** @format */\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport chroma from \"chroma-js\";\nimport insult from \"./insult.json\";\n\nfunction App() {\n\tconst [data, setData] = useState(null);\n\tconst [color, setColor] = useState([\"#33ccff\", \"#ff99cc\"]);\n\tuseEffect(() => {\n\t\tconst ind = Math.floor(Math.random() * insult.length) + 0;\n\t\tconst insultData = insult[ind];\n\t\tsetData(insultData);\n\t\tsetColor([chroma.random(), chroma.random()]);\n\t}, []);\n\n\treturn (\n\t\t<div\n\t\t\tclassName='App'\n\t\t\tstyle={{\n\t\t\t\tbackground: `linear-gradient(to bottom,  ${color[0]} 0%,${color[1]} 100%)`,\n\t\t\t}}>\n\t\t\t<h1 className='header mb-2'>Evil Quotes</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\tmarginTop: \"20px\",\n\t\t\t\t}}>\n\t\t\t\t{!data ? (\n\t\t\t\t\t<div class='spin'></div>\n\t\t\t\t) : (\n\t\t\t\t\t<div class='blockquote overlay'>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontSize: \"larger\",\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{data}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}